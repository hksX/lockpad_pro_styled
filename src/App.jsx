import React, { useEffect, useState } from 'react'; import Onboarding from './components/Onboarding'; import UnlockCard from './components/UnlockCard'; import NoteEditor from './components/NoteEditor'; import NoteList from './components/NoteList'; import ExportImport from './components/ExportImport'; import useAutoLock from './hooks/useAutoLock'; import { initDB, getAllNotes, addNote as dbAdd, updateNote as dbUpdate, deleteNote as dbDelete } from './utils/db'; import { encryptText, decryptText } from './utils/crypto'; import { v4 as uuidv4 } from 'uuid'; const SALT='lockpad_salt'; export default function App(){ const [salt,setSalt]=useState(localStorage.getItem(SALT)); const [unlocked,setUnlocked]=useState(false); const [master,setMaster]=useState(''); const [notes,setNotes]=useState([]); const [editing,setEditing]=useState(null); const [filter,setFilter]=useState('notes'); useEffect(()=>{ initDB(); },[]); useEffect(()=>{ if(!unlocked) return; (async ()=>{ const all = await getAllNotes(); const dec = all.map(n=>{ try{ const content = decryptText(n.ciphertext, master, salt, n.iv); return {...n, plaintext: content}; }catch(e){ return {...n, plaintext:'<i>ðŸ”’ decryption failed</i>'}; } }); setNotes(dec.sort((a,b)=> (b.pinned - a.pinned) || (b.updatedAt - a.updatedAt))); })(); },[unlocked,master,salt]); useAutoLock(()=>{ if(unlocked){ setUnlocked(false); setMaster(''); } },5); const onCreated=(pw)=>{ setSalt(localStorage.getItem(SALT)); setMaster(pw); setUnlocked(true); }; const onUnlock=(pw)=>{ setMaster(pw); setUnlocked(true); }; const addNote=async(title,plaintext,tags=[])=>{ const {ciphertext,iv}=encryptText(plaintext,master,salt); const note={id:uuidv4(),title,ciphertext,iv,tags,pinned:false,archived:false,deleted:false,createdAt:Date.now(),updatedAt:Date.now()}; await dbAdd(note); setNotes(prev=>[{...note,plaintext}, ...prev]); }; const updateNote=async(id,fields)=>{ const found=notes.find(n=>n.id===id); if(!found) return; let updated={...found,...fields,updatedAt:Date.now()}; if(fields.plaintext!==undefined){ const {ciphertext,iv}=encryptText(fields.plaintext,master,salt); updated.ciphertext=ciphertext; updated.iv=iv; updated.plaintext=fields.plaintext; } await dbUpdate(updated); setNotes(prev=>prev.map(p=>p.id===id?updated:p)); }; const deleteNote=async(id,perm=false)=>{ if(perm){ await dbDelete(id); setNotes(prev=>prev.filter(n=>n.id!==id)); return; } await updateNote(id,{deleted:true}); }; const edit=(note)=>{ setEditing(note); window.scrollTo({top:0,behavior:'smooth'}); }; const onSaveFromEditor=(title,plaintext,tags)=>{ if(editing){ updateNote(editing.id,{plaintext,title,tags}); setEditing(null); return; } addNote(title,plaintext,tags); }; const copyToClipboard=async(text)=>{ try{ await navigator.clipboard.writeText(text.replace(/<[^>]*>/g,'')); alert('Copied'); }catch(e){ alert('Copy failed'); } }; if(!salt) return <Onboarding onCreated={onCreated} />; if(!unlocked) return <UnlockCard onUnlock={onUnlock} onCreate={()=>setSalt(null)} />; return (<div className='container'><div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}><div style={{display:'flex',alignItems:'center',gap:12}}><div className='logo'>LP</div><div><div style={{fontWeight:700}}>LockPad Pro</div><div className='small'>Secure, encrypted notes</div></div></div><div className='header-controls'><ExportImport onImported={()=>window.location.reload()} /><button className='btn' onClick={()=>{ setUnlocked(false); setMaster(''); }}>Lock</button></div></div><div className='grid' style={{marginTop:18}}><div><NoteEditor onSave={onSaveFromEditor} editing={editing} /><div style={{marginTop:12}} className='card'><div style={{display:'flex',gap:8}}><input placeholder='Search...' className='input' onChange={()=>{}} /><select onChange={e=>setFilter(e.target.value)} value={filter}><option value='notes'>Notes</option><option value='pinned'>Pinned</option><option value='archived'>Archived</option><option value='trash'>Trash</option><option value='all'>All</option></select></div></div></div><div><NoteList notes={notes} onUpdate={updateNote} onDelete={deleteNote} onEdit={edit} filter={filter} onCopy={copyToClipboard} /></div></div></div>); }
